# config.yml
# models:
#   - type: main
#     engine: openai
#     model: gpt-3.5-turbo-instruct

prompts:
  generate_multi_choice_question:
    task: |
      # GSAT English Multiple-Choice Question Generation Instructions

      ## Advanced Vocabulary-Driven Question Generation

      ### Input Parameters
      - `ground_truth_vocab`: The target vocabulary word that is the correct answer
      - `candidate_vocabs`: A list of alternative vocabulary words to be used as distractors
      - `context_constraints` (optional): Additional context or thematic requirements

      ### Input Format
      - ground_truth_vocab: [target word]
      - candidate_vocabs: [list of alternative words]
      - context_constraints: [optional context requirements]

      ## Vocabulary Selection Process
      1. Use `ground_truth_vocab` as the definitive correct answer
      2. Evaluate `candidate_vocabs` for potential distractors
      3. If insufficient `candidate_vocabs` are provided, generate additional plausible alternatives

      ### Vocabulary Matching Criteria
      - Semantic similarity to ground truth
      - Grammatical compatibility
      - Potential for confusion
      - Contextual plausibility

      ## Output Format
      Output always provide in this exact format:
      ```json
      {
        "question": Sentence with ______ blank,
        "options": {
          "A": Option1,
          "B": Option2,
          "C": Option3,
          "D": Option4,
        },
        "answer": [ground_truth_vocab]
      }
      ```

      ## Example Usage

      ### Example 1: Basic Usage
      Input:
      ```
      - ground_truth_vocab: slender
      - candidate_vocabs: spicy, slight, slippery
      Output:
      ```json
      {
        "question": "People who desire a ______ figure should exercise regularly and maintain healthy eating habits.",
        "options": {
          "A": "spicy",
          "B": "slender",
          "C": "slight",
          "D": "slippery",
        },
        "answer": "slender"
      }
      ```

      ### Example 2: With Context Constraints
      Input:
      ```
      - ground_truth_vocab: emerging
      - candidate_vocabs: flashing, rushing, floating
      - context_constraints: "Scenic mountain view at sunrise"
      ```
      Output:
      ```json
      {
        "question": "Watching the sun ______ from a sea of clouds is a must-do activity for all visitors to Ali Mountain.",
        "options": {
          "A": "emerging",
          "B": "flashing",
          "C": "rushing",
          "D": "floating",
        },
        "answer": "emerging"
      }
      ```

      ## Advanced Features
      - Automatic semantic evaluation of candidates
      - Difficulty level adjustment
      - Contextual coherence check
      - Grammar and syntax verification

      ## Candidate Vocabulary Selection Rules
      1. Minimum of 3 alternative words
      2. Words should be:
        - Close in part of speech
        - Similar semantic complexity
        - Potentially confusing
        - Grammatically compatible

      ## Scoring Mechanism
      - Semantic Distance: How close alternatives are to ground truth
      - Contextual Fit: How well words integrate into the sentence
      - Distractor Quality: Plausibility of incorrect options

      ## Question
      Input:
      ```
      - ground_truth_vocab: {{ target_vocab }}
      - candidate_vocabs: {{ candidate_vocabs }}
      Output:
      ```json
    source: null
    params:
      target_vocab: brother
      candidate_vocabs: buckle, mamamiya, bkuku, fuckyou

  # flag:
  #   task: |
  #     Instruction:

  #     Say True

  #     Answer [{{ options }}]:
  #   params:
  #     options: 'True'

functions:
  parse_response:
    task: match_and_parse_plain_text
    source: 'utils.text'
    params:
      pattern: 'json\n({.*?})\n'

actions:
  generate_multi_choice_question:
    type: prompt
    task: generate_multi_choice_question
  parse_response:
    type: function
    task: parse_response


# conditions:
#   flag:
#     type: prompt
#     task: flag
    # params:
    #   options: True

flows:
  qa:
    # condition: flag
    action: generate_multi_choice_question
  parse_response:
    action: parse_response

rails:
  input:
    flows:
      - qa

  output:
    flows:
      - parse_response
